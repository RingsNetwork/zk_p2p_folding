let wasm;

const heap = new Array(128).fill(undefined);

heap.push(undefined, null, true, false);

function getObject(idx) { return heap[idx]; }

let heap_next = heap.length;

function dropObject(idx) {
    if (idx < 132) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

const cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );

if (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };

let cachedUint8Memory0 = null;

function getUint8Memory0() {
    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachedFloat64Memory0 = null;

function getFloat64Memory0() {
    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {
        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);
    }
    return cachedFloat64Memory0;
}

let cachedInt32Memory0 = null;

function getInt32Memory0() {
    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachedInt32Memory0;
}

let WASM_VECTOR_LEN = 0;

const cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length, 1) >>> 0;
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len, 1) >>> 0;

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

let cachedBigInt64Memory0 = null;

function getBigInt64Memory0() {
    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.byteLength === 0) {
        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);
    }
    return cachedBigInt64Memory0;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);

            } else {
                state.a = a;
            }
        }
    };
    real.original = state;

    return real;
}
function __wbg_adapter_64(arg0, arg1, arg2) {
    wasm.__wbindgen_export_3(arg0, arg1, addHeapObject(arg2));
}

function __wbg_adapter_67(arg0, arg1, arg2) {
    wasm.__wbindgen_export_4(arg0, arg1, addHeapObject(arg2));
}

function __wbg_adapter_70(arg0, arg1) {
    wasm.__wbindgen_export_5(arg0, arg1);
}

function __wbg_adapter_73(arg0, arg1, arg2) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        wasm.__wbindgen_export_6(retptr, arg0, arg1, addHeapObject(arg2));
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        if (r1) {
            throw takeObject(r0);
        }
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

function __wbg_adapter_76(arg0, arg1, arg2) {
    wasm.__wbindgen_export_7(arg0, arg1, addHeapObject(arg2));
}

function __wbg_adapter_83(arg0, arg1) {
    wasm.__wbindgen_export_8(arg0, arg1);
}

function __wbg_adapter_86(arg0, arg1, arg2) {
    wasm.__wbindgen_export_9(arg0, arg1, addHeapObject(arg2));
}

let cachedUint32Memory0 = null;

function getUint32Memory0() {
    if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {
        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);
    }
    return cachedUint32Memory0;
}

function getArrayJsValueFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    const mem = getUint32Memory0();
    const slice = mem.subarray(ptr / 4, ptr / 4 + len);
    const result = [];
    for (let i = 0; i < slice.length; i++) {
        result.push(takeObject(slice[i]));
    }
    return result;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}

function passArrayJsValueToWasm0(array, malloc) {
    const ptr = malloc(array.length * 4, 4) >>> 0;
    const mem = getUint32Memory0();
    for (let i = 0; i < array.length; i++) {
        mem[ptr / 4 + i] = addHeapObject(array[i]);
    }
    WASM_VECTOR_LEN = array.length;
    return ptr;
}
/**
* Convert BigInt from js to [Field]
* @param {bigint} v
* @param {SupportedPrimeField} field
* @returns {Field}
*/
export function bigint_to_field(v, field) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        wasm.bigint_to_field(retptr, addHeapObject(v), field);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        if (r2) {
            throw takeObject(r1);
        }
        return Field.__wrap(r0);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* set debug for wasm.
* if `true` will print `Debug` message in console,
* otherwise only print `error` message
* @param {boolean} value
*/
export function debug(value) {
    wasm.debug(value);
}

/**
* set log_level
* @param {string} level
*/
export function log_level(level) {
    const ptr0 = passStringToWasm0(level, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
    const len0 = WASM_VECTOR_LEN;
    wasm.log_level(ptr0, len0);
}

/**
* @param {LogLevel} level
*/
export function init_logging(level) {
    wasm.init_logging(level);
}

/**
* Get address from hex pubkey
*  * pubkey: hex pubkey
* @param {string} pubkey
* @returns {string}
*/
export function get_address_from_hex_pubkey(pubkey) {
    let deferred3_0;
    let deferred3_1;
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        const ptr0 = passStringToWasm0(pubkey, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        wasm.get_address_from_hex_pubkey(retptr, ptr0, len0);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        var ptr2 = r0;
        var len2 = r1;
        if (r3) {
            ptr2 = 0; len2 = 0;
            throw takeObject(r2);
        }
        deferred3_0 = ptr2;
        deferred3_1 = len2;
        return getStringFromWasm0(ptr2, len2);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
        wasm.__wbindgen_export_10(deferred3_0, deferred3_1, 1);
    }
}

/**
* Get address from other address
*   * address: source address
*   * addr_type: source address type
* @param {string} address
* @param {AddressType} addr_type
* @returns {string}
*/
export function get_address(address, addr_type) {
    let deferred3_0;
    let deferred3_1;
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        wasm.get_address(retptr, ptr0, len0, addr_type);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        var ptr2 = r0;
        var len2 = r1;
        if (r3) {
            ptr2 = 0; len2 = 0;
            throw takeObject(r2);
        }
        deferred3_0 = ptr2;
        deferred3_1 = len2;
        return getStringFromWasm0(ptr2, len2);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
        wasm.__wbindgen_export_10(deferred3_0, deferred3_1, 1);
    }
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        wasm.__wbindgen_export_11(addHeapObject(e));
    }
}

function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1, 1) >>> 0;
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function getArrayU8FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function __wbg_adapter_469(arg0, arg1, arg2, arg3) {
    wasm.__wbindgen_export_12(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));
}

/**
* Supported prime field
*/
export const SupportedPrimeField = Object.freeze({
/**
* field of vesta curve
*/
Vesta:0,"0":"Vesta",
/**
* field of pallas curve
*/
Pallas:1,"1":"Pallas",
/**
* bn256 with kzg
*/
Bn256KZG:2,"2":"Bn256KZG", });
/**
*/
export const LogLevel = Object.freeze({ Debug:0,"0":"Debug",Info:1,"1":"Info",Warn:2,"2":"Warn",Error:3,"3":"Error",Trace:4,"4":"Trace", });
/**
* AddressType enum contains `DEFAULT` and `ED25519`.
*/
export const AddressType = Object.freeze({
/**
* Default address type, hex string of sha1(pubkey)
*/
DEFAULT:0,"0":"DEFAULT",
/**
* Ed25519 style address type, hex string of pubkey
*/
Ed25519:1,"1":"Ed25519", });
/**
* BackendBehaviour is a context instance for handling backend message for browser
*/
export class BackendBehaviour {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(BackendBehaviour.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_backendbehaviour_free(ptr);
    }
    /**
    * Create a new instance of message callback, this function accept one argument:
    */
    constructor() {
        const ret = wasm.backendbehaviour_new();
        this.__wbg_ptr = ret >>> 0;
        return this;
    }
    /**
    * Get behaviour as dyn obj ref
    * @returns {BackendMessageHandlerDynObj}
    */
    as_dyn_obj() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.backendbehaviour_as_dyn_obj(ptr);
        return BackendMessageHandlerDynObj.__wrap(ret);
    }
    /**
    * Extend backend with other backend
    * @param {BackendMessageHandlerDynObj} impl_backend
    */
    extend(impl_backend) {
        const ptr = this.__destroy_into_raw();
        _assertClass(impl_backend, BackendMessageHandlerDynObj);
        var ptr0 = impl_backend.__destroy_into_raw();
        wasm.backendbehaviour_extend(ptr, ptr0);
    }
    /**
    * register call back function
    * * func: `function(provider: Arc<Provider>, payload: string, message: string) -> Promise<()>`;
    * @param {string} method
    * @param {Function} func
    */
    on(method, func) {
        const ptr0 = passStringToWasm0(method, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        wasm.backendbehaviour_on(this.__wbg_ptr, ptr0, len0, addHeapObject(func));
    }
}
/**
* This struct is used to simulate `impl T`
* We need this structure because wasm_bindgen does not support general type such as
* `dyn T` or `impl T`
* We use Arc instead Box, to make it cloneable.
*/
export class BackendMessageHandlerDynObj {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(BackendMessageHandlerDynObj.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_backendmessagehandlerdynobj_free(ptr);
    }
}
/**
* Circuit, it's a typeless wrapper of rings_snark circuit
*/
export class Circuit {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Circuit.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    static __unwrap(jsValue) {
        if (!(jsValue instanceof Circuit)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_circuit_free(ptr);
    }
    /**
    * serialize circuit to json
    * @returns {string}
    */
    to_json() {
        let deferred2_0;
        let deferred2_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.circuit_to_json(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            var ptr1 = r0;
            var len1 = r1;
            if (r3) {
                ptr1 = 0; len1 = 0;
                throw takeObject(r2);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_10(deferred2_0, deferred2_1, 1);
        }
    }
    /**
    * deserialize circuit from json
    * @param {string} s
    * @returns {Circuit}
    */
    static from_json(s) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            wasm.circuit_from_json(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return Circuit.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* Field type
*/
export class Field {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Field.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_field_free(ptr);
    }
    /**
    * create field from u64
    * @param {bigint} v
    * @param {SupportedPrimeField} ty
    * @returns {Field}
    */
    static from_u64(v, ty) {
        const ret = wasm.field_from_u64(v, ty);
        return Field.__wrap(ret);
    }
}
/**
* Input type
*/
export class Input {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Input.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    static __unwrap(jsValue) {
        if (!(jsValue instanceof Input)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_input_free(ptr);
    }
    /**
    * Convert [["foo", [BigInt(2), BigInt(3)]], ["bar", [BigInt(4), BigInt(5)]]] to Input with given field
    * @param {Array<any>} input
    * @param {SupportedPrimeField} field
    * @returns {Input}
    */
    static from_array(input, field) {
        const ret = wasm.input_from_array(addHeapObject(input), field);
        return Input.__wrap(ret);
    }
    /**
    * serialize Input to json
    * @returns {string}
    */
    to_json() {
        let deferred2_0;
        let deferred2_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.input_to_json(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            var ptr1 = r0;
            var len1 = r1;
            if (r3) {
                ptr1 = 0; len1 = 0;
                throw takeObject(r2);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_10(deferred2_0, deferred2_1, 1);
        }
    }
    /**
    * deserialize Input from json
    * @param {string} s
    * @returns {Input}
    */
    static from_json(s) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            wasm.input_from_json(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return Input.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* ProcessorConfig is usually serialized as json or yaml.
* There is a `from_config` method in [ProcessorBuilder] used to initialize the Builder with a serialized ProcessorConfig.
*/
export class ProcessorConfig {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ProcessorConfig.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_processorconfig_free(ptr);
    }
    /**
    * Creates a new `ProcessorConfig` instance without an external address.
    * @param {string} ice_servers
    * @param {SessionSk} session_sk
    * @param {bigint} stabilize_timeout
    * @returns {ProcessorConfig}
    */
    static new(ice_servers, session_sk, stabilize_timeout) {
        const ptr0 = passStringToWasm0(ice_servers, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(session_sk, SessionSk);
        var ptr1 = session_sk.__destroy_into_raw();
        const ret = wasm.processorconfig_new(ptr0, len0, ptr1, stabilize_timeout);
        return ProcessorConfig.__wrap(ret);
    }
    /**
    * Creates a new `ProcessorConfig` instance with an external address.
    * @param {string} ice_servers
    * @param {SessionSk} session_sk
    * @param {bigint} stabilize_timeout
    * @param {string} external_address
    * @returns {ProcessorConfig}
    */
    static new_with_ext_addr(ice_servers, session_sk, stabilize_timeout, external_address) {
        const ptr0 = passStringToWasm0(ice_servers, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(session_sk, SessionSk);
        var ptr1 = session_sk.__destroy_into_raw();
        const ptr2 = passStringToWasm0(external_address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len2 = WASM_VECTOR_LEN;
        const ret = wasm.processorconfig_new_with_ext_addr(ptr0, len0, ptr1, stabilize_timeout, ptr2, len2);
        return ProcessorConfig.__wrap(ret);
    }
    /**
    * Return associated [SessionSk].
    * @returns {SessionSk}
    */
    session_sk() {
        const ret = wasm.processorconfig_session_sk(this.__wbg_ptr);
        return SessionSk.__wrap(ret);
    }
}
/**
* `ProcessorConfigSerialized` is a serialized version of `ProcessorConfig`.
* Instead of storing the `SessionSk` instance, it stores the dumped string representation of the session secret key.
*/
export class ProcessorConfigSerialized {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_processorconfigserialized_free(ptr);
    }
}
/**
* General Provider, which holding reference of Processor
* Provider should be obey memory layout of CLang
* Provider should be export for wasm-bindgen
*/
export class Provider {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Provider.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_provider_free(ptr);
    }
    /**
    * make provider as an As arc ref
    * @returns {ProviderRef}
    */
    as_ref() {
        const ret = wasm.provider_as_ref(this.__wbg_ptr);
        return ProviderRef.__wrap(ret);
    }
    /**
    * Create new instance of Provider, return Promise
    * Ice_servers should obey forrmat: "[turn|strun]://<Address>:<Port>;..."
    * Account is hex string
    * Account should format as same as account_type declared
    * Account_type is lowercase string, possible input are: `eip191`, `ed25519`, `bip137`, for more imformation,
    * please check [rings_core::ecc]
    * Signer should be `async function (proof: string): Promise<Unit8Array>`
    * Signer should function as same as account_type declared, Eg: eip191 or secp256k1 or ed25519.
    * @param {string} ice_servers
    * @param {bigint} stabilize_timeout
    * @param {string} account
    * @param {string} account_type
    * @param {Function} signer
    * @param {BackendBehaviour | undefined} [backend_behaviour]
    */
    constructor(ice_servers, stabilize_timeout, account, account_type, signer, backend_behaviour) {
        const ptr0 = passStringToWasm0(ice_servers, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(account, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passStringToWasm0(account_type, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len2 = WASM_VECTOR_LEN;
        let ptr3 = 0;
        if (!isLikeNone(backend_behaviour)) {
            _assertClass(backend_behaviour, BackendBehaviour);
            ptr3 = backend_behaviour.__destroy_into_raw();
        }
        const ret = wasm.provider_new_instance(ptr0, len0, stabilize_timeout, ptr1, len1, ptr2, len2, addHeapObject(signer), ptr3);
        return takeObject(ret);
    }
    /**
    * Create new provider instance with serialized config (yaml/json)
    * @param {string} config
    * @param {BackendBehaviour | undefined} [backend]
    * @returns {Promise<any>}
    */
    static new_provider_with_serialized_config(config, backend) {
        const ptr0 = passStringToWasm0(config, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        let ptr1 = 0;
        if (!isLikeNone(backend)) {
            _assertClass(backend, BackendBehaviour);
            ptr1 = backend.__destroy_into_raw();
        }
        const ret = wasm.provider_new_provider_with_serialized_config(ptr0, len0, ptr1);
        return takeObject(ret);
    }
    /**
    * Create a new provider instance.
    * @param {ProcessorConfig} config
    * @param {BackendBehaviour | undefined} [backend]
    * @returns {Promise<any>}
    */
    static new_provider_with_config(config, backend) {
        _assertClass(config, ProcessorConfig);
        var ptr0 = config.__destroy_into_raw();
        let ptr1 = 0;
        if (!isLikeNone(backend)) {
            _assertClass(backend, BackendBehaviour);
            ptr1 = backend.__destroy_into_raw();
        }
        const ret = wasm.provider_new_provider_with_config(ptr0, ptr1);
        return takeObject(ret);
    }
    /**
    * get self web3 address
    * @returns {string}
    */
    get address() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.provider_address(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_10(deferred1_0, deferred1_1, 1);
        }
    }
    /**
    *  create new unsigned Provider
    * @param {ProcessorConfig} config
    * @param {BackendBehaviour | undefined} backend_behaviour
    * @param {string} storage_name
    * @returns {Promise<any>}
    */
    static new_provider_with_storage(config, backend_behaviour, storage_name) {
        _assertClass(config, ProcessorConfig);
        var ptr0 = config.__destroy_into_raw();
        let ptr1 = 0;
        if (!isLikeNone(backend_behaviour)) {
            _assertClass(backend_behaviour, BackendBehaviour);
            ptr1 = backend_behaviour.__destroy_into_raw();
        }
        const ptr2 = passStringToWasm0(storage_name, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len2 = WASM_VECTOR_LEN;
        const ret = wasm.provider_new_provider_with_storage(ptr0, ptr1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * Request local rpc interface
    * @param {string} method
    * @param {any} params
    * @returns {Promise<any>}
    */
    request(method, params) {
        const ptr0 = passStringToWasm0(method, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_request(this.__wbg_ptr, ptr0, len0, addHeapObject(params));
        return takeObject(ret);
    }
    /**
    * listen message.
    * @returns {Promise<any>}
    */
    listen() {
        const ret = wasm.provider_listen(this.__wbg_ptr);
        return takeObject(ret);
    }
    /**
    * connect peer with remote jsonrpc server url
    * @param {string} remote_url
    * @returns {Promise<any>}
    */
    connect_peer_via_http(remote_url) {
        const ptr0 = passStringToWasm0(remote_url, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_connect_peer_via_http(this.__wbg_ptr, ptr0, len0);
        return takeObject(ret);
    }
    /**
    * connect peer with web3 address, without waiting for connection channel connected
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    connect_with_address_without_wait(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_connect_with_address_without_wait(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * connect peer with web3 address, and wait for connection channel connected
    * example:
    * ```typescript
    * const provider1 = new Provider()
    * const provider2 = new Provider()
    * const provider3 = new Provider()
    * await create_connection(provider1, provider2);
    * await create_connection(provider2, provider3);
    * await provider1.connect_with_did(provider3.address())
    * ```
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    connect_with_address(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_connect_with_address(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * list all connect peers
    * @returns {Promise<any>}
    */
    list_peers() {
        const ret = wasm.provider_list_peers(this.__wbg_ptr);
        return takeObject(ret);
    }
    /**
    * get info for self, will return build version and inspection of swarm
    * @returns {Promise<any>}
    */
    get_node_info() {
        const ret = wasm.provider_get_node_info(this.__wbg_ptr);
        return takeObject(ret);
    }
    /**
    * disconnect a peer with web3 address
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    disconnect(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_disconnect(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * disconnect all connected nodes
    * @returns {Promise<any>}
    */
    disconnect_all() {
        const ret = wasm.provider_disconnect_all(this.__wbg_ptr);
        return takeObject(ret);
    }
    /**
    * send custom message to peer.
    * @param {string} destination
    * @param {Uint8Array} msg
    * @returns {Promise<any>}
    */
    send_message(destination, msg) {
        const ptr0 = passStringToWasm0(destination, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_send_message(this.__wbg_ptr, ptr0, len0, addHeapObject(msg));
        return takeObject(ret);
    }
    /**
    * get peer by address
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    get_peer(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_get_peer(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * wait for connection connected
    * * address: peer's address
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    wait_for_connected(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_wait_for_connected(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * wait for data channel open
    *   * address: peer's address
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    wait_for_data_channel_open(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_wait_for_data_channel_open(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * Check local cache
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    storage_check_cache(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_storage_check_cache(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * fetch storage with given did
    * @param {string} address
    * @param {AddressType | undefined} [addr_type]
    * @returns {Promise<any>}
    */
    storage_fetch(address, addr_type) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_storage_fetch(this.__wbg_ptr, ptr0, len0, isLikeNone(addr_type) ? 2 : addr_type);
        return takeObject(ret);
    }
    /**
    * store virtual node on DHT
    * @param {string} data
    * @returns {Promise<any>}
    */
    storage_store(data) {
        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_storage_store(this.__wbg_ptr, ptr0, len0);
        return takeObject(ret);
    }
    /**
    * send http request message to remote
    * - destination: did
    * - service: service name
    * - method: http method
    * - path: http path like `/ipfs/abc1234` `/ipns/abc`
    * - headers: headers of request
    * - body: body of request
    * @param {string} destination
    * @param {string} service
    * @param {string} method
    * @param {string} path
    * @param {any} headers
    * @param {Uint8Array | undefined} [body]
    * @param {string | undefined} [rid]
    * @returns {Promise<any>}
    */
    send_http_request(destination, service, method, path, headers, body, rid) {
        const ptr0 = passStringToWasm0(destination, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(service, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passStringToWasm0(method, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len2 = WASM_VECTOR_LEN;
        const ptr3 = passStringToWasm0(path, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len3 = WASM_VECTOR_LEN;
        var ptr4 = isLikeNone(rid) ? 0 : passStringToWasm0(rid, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        var len4 = WASM_VECTOR_LEN;
        const ret = wasm.provider_send_http_request(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, addHeapObject(headers), isLikeNone(body) ? 0 : addHeapObject(body), ptr4, len4);
        return takeObject(ret);
    }
    /**
    * send simple text message to remote
    * - destination: A did of destination
    * - text: text message
    * @param {string} destination
    * @param {string} text
    * @returns {Promise<any>}
    */
    send_simple_text_message(destination, text) {
        const ptr0 = passStringToWasm0(destination, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(text, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.provider_send_simple_text_message(this.__wbg_ptr, ptr0, len0, ptr1, len1);
        return takeObject(ret);
    }
    /**
    * lookup service did on DHT by its name
    * - name: The name of service
    * @param {string} name
    * @returns {Promise<any>}
    */
    lookup_service(name) {
        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.provider_lookup_service(this.__wbg_ptr, ptr0, len0);
        return takeObject(ret);
    }
}
/**
* A wrapper of Arc Ref of Provider
*/
export class ProviderRef {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ProviderRef.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_providerref_free(ptr);
    }
}
/**
* SNARK message handler
*/
export class SNARKBehaviour {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SNARKBehaviour.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_snarkbehaviour_free(ptr);
    }
    /**
    * Get behaviour as dyn obj ref
    * @returns {BackendMessageHandlerDynObj}
    */
    as_dyn_obj() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.snarkbehaviour_as_dyn_obj(ptr);
        return BackendMessageHandlerDynObj.__wrap(ret);
    }
    /**
    * Handle js native message
    * @param {ProviderRef} provider
    * @param {any} ctx
    * @param {any} msg
    * @returns {Promise<any>}
    */
    handle_snark_task_message(provider, ctx, msg) {
        const ptr = this.__destroy_into_raw();
        _assertClass(provider, ProviderRef);
        var ptr0 = provider.__destroy_into_raw();
        const ret = wasm.snarkbehaviour_handle_snark_task_message(ptr, ptr0, addHeapObject(ctx), addHeapObject(msg));
        return takeObject(ret);
    }
    /**
    * gen proof task with circuits, this function is use for solo proof
    * you can call [SNARKBehaviour::handle_snark_proof_task_ref] later to finalize the proof
    * @param {(Circuit)[]} circuits
    * @returns {SNARKProofTaskRef}
    */
    static gen_proof_task_ref(circuits) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArrayJsValueToWasm0(circuits, wasm.__wbindgen_export_0);
            const len0 = WASM_VECTOR_LEN;
            wasm.snarkbehaviour_gen_proof_task_ref(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return SNARKProofTaskRef.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * handle snark proof task ref, this function is helpful for js_sys
    * @param {SNARKProofTaskRef} data
    * @returns {SNARKVerifyTaskRef}
    */
    static handle_snark_proof_task_ref(data) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(data, SNARKProofTaskRef);
            var ptr0 = data.__destroy_into_raw();
            wasm.snarkbehaviour_handle_snark_proof_task_ref(retptr, ptr0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return SNARKVerifyTaskRef.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * handle snark verify task ref, this function is helpful for js_sys
    * @param {SNARKVerifyTaskRef} data
    * @param {SNARKProofTaskRef} snark
    * @returns {boolean}
    */
    static handle_snark_verify_task_ref(data, snark) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(data, SNARKVerifyTaskRef);
            var ptr0 = data.__destroy_into_raw();
            _assertClass(snark, SNARKProofTaskRef);
            var ptr1 = snark.__destroy_into_raw();
            wasm.snarkbehaviour_handle_snark_verify_task_ref(retptr, ptr0, ptr1);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return r0 !== 0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * send proof task to did
    * @param {ProviderRef} provider
    * @param {SNARKProofTaskRef} task
    * @param {string} did
    * @returns {Promise<any>}
    */
    send_proof_task_to(provider, task, did) {
        _assertClass(provider, ProviderRef);
        var ptr0 = provider.__destroy_into_raw();
        _assertClass(task, SNARKProofTaskRef);
        var ptr1 = task.__destroy_into_raw();
        const ptr2 = passStringToWasm0(did, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len2 = WASM_VECTOR_LEN;
        const ret = wasm.snarkbehaviour_send_proof_task_to(this.__wbg_ptr, ptr0, ptr1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * Generate a proof task and send it to did
    * @param {ProviderRef} provider
    * @param {(Circuit)[]} circuits
    * @param {string} did
    * @returns {Promise<any>}
    */
    gen_and_send_proof_task_to(provider, circuits, did) {
        _assertClass(provider, ProviderRef);
        var ptr0 = provider.__destroy_into_raw();
        const ptr1 = passArrayJsValueToWasm0(circuits, wasm.__wbindgen_export_0);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passStringToWasm0(did, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len2 = WASM_VECTOR_LEN;
        const ret = wasm.snarkbehaviour_gen_and_send_proof_task_to(this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * create new instance for browser
    * which support syntax `new SNARKBehaviour` in browser env
    */
    constructor() {
        const ret = wasm.snarkbehaviour_new_instance();
        this.__wbg_ptr = ret >>> 0;
        return this;
    }
    /**
    * Clone snarkbehaviour, and hold the arc
    * this function is useful on js_sys
    * @returns {SNARKBehaviour}
    */
    clone() {
        const ret = wasm.snarkbehaviour_clone(this.__wbg_ptr);
        return SNARKBehaviour.__wrap(ret);
    }
    /**
    * Get task result
    * @param {string} task_id
    * @returns {boolean}
    */
    get_task_result(task_id) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(task_id, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            wasm.snarkbehaviour_get_task_result(retptr, this.__wbg_ptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return r0 !== 0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* We need this ref to pass Task ref to js_sys
*/
export class SNARKProofTaskRef {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SNARKProofTaskRef.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_snarkprooftaskref_free(ptr);
    }
    /**
    * Make snark proof task ref splitable
    * @param {number} n
    * @returns {(SNARKProofTaskRef)[]}
    */
    split(n) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.snarkprooftaskref_split(retptr, this.__wbg_ptr, n);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_10(r0, r1 * 4, 4);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * serialize SNARKProofTaskRef to json
    * @returns {string}
    */
    to_json() {
        let deferred2_0;
        let deferred2_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.snarkprooftaskref_to_json(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            var ptr1 = r0;
            var len1 = r1;
            if (r3) {
                ptr1 = 0; len1 = 0;
                throw takeObject(r2);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_10(deferred2_0, deferred2_1, 1);
        }
    }
    /**
    * deserialize SNARKProofTaskRef from json
    * @param {string} s
    * @returns {SNARKProofTaskRef}
    */
    static from_json(s) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            wasm.snarkprooftaskref_from_json(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return SNARKProofTaskRef.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Clone snark proof ref, and hold the arc
    * this function is useful on js_sys
    * @returns {SNARKProofTaskRef}
    */
    clone() {
        const ret = wasm.snarkbehaviour_clone(this.__wbg_ptr);
        return SNARKProofTaskRef.__wrap(ret);
    }
}
/**
* Snark builder
*/
export class SNARKTaskBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SNARKTaskBuilder.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_snarktaskbuilder_free(ptr);
    }
    /**
    * create new instance for browser
    * which support syntax `new SNARKTaskBuilder` in browser env
    * @param {string} r1cs_path
    * @param {string} witness_wasm_path
    * @param {SupportedPrimeField} field
    */
    constructor(r1cs_path, witness_wasm_path, field) {
        const ptr0 = passStringToWasm0(r1cs_path, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(witness_wasm_path, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.snarktaskbuilder_new_instance(ptr0, len0, ptr1, len1, field);
        return takeObject(ret);
    }
    /**
    * Load r1cs sand witness from local path
    * @param {string} r1cs_path
    * @param {string} witness_wasm_path
    * @param {SupportedPrimeField} field
    * @returns {Promise<SNARKTaskBuilder>}
    */
    static from_local(r1cs_path, witness_wasm_path, field) {
        const ptr0 = passStringToWasm0(r1cs_path, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(witness_wasm_path, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.snarktaskbuilder_from_local(ptr0, len0, ptr1, len1, field);
        return takeObject(ret);
    }
    /**
    * Load r1cs sand witness from remote url
    * @param {string} r1cs_path
    * @param {string} witness_wasm_path
    * @param {SupportedPrimeField} field
    * @returns {Promise<SNARKTaskBuilder>}
    */
    static from_remote(r1cs_path, witness_wasm_path, field) {
        const ptr0 = passStringToWasm0(r1cs_path, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(witness_wasm_path, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.snarktaskbuilder_from_remote(ptr0, len0, ptr1, len1, field);
        return takeObject(ret);
    }
    /**
    * generate recursive circuits
    * @param {Input} public_input
    * @param {(Input)[]} private_inputs
    * @param {number} round
    * @returns {(Circuit)[]}
    */
    gen_circuits(public_input, private_inputs, round) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(public_input, Input);
            var ptr0 = public_input.__destroy_into_raw();
            const ptr1 = passArrayJsValueToWasm0(private_inputs, wasm.__wbindgen_export_0);
            const len1 = WASM_VECTOR_LEN;
            wasm.snarktaskbuilder_gen_circuits(retptr, this.__wbg_ptr, ptr0, ptr1, len1, round);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            if (r3) {
                throw takeObject(r2);
            }
            var v3 = getArrayJsValueFromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_10(r0, r1 * 4, 4);
            return v3;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* We need this ref to pass Task ref to js_sys
*/
export class SNARKVerifyTaskRef {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SNARKVerifyTaskRef.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_snarkverifytaskref_free(ptr);
    }
    /**
    * serialize SNARKPVerifyRef to json
    * @returns {string}
    */
    to_json() {
        let deferred2_0;
        let deferred2_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.snarkverifytaskref_to_json(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            var ptr1 = r0;
            var len1 = r1;
            if (r3) {
                ptr1 = 0; len1 = 0;
                throw takeObject(r2);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_10(deferred2_0, deferred2_1, 1);
        }
    }
    /**
    * de serialize SNARKPVerifyRef from json
    * @param {string} s
    * @returns {SNARKVerifyTaskRef}
    */
    static from_json(s) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            wasm.snarkverifytaskref_from_json(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return SNARKVerifyTaskRef.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Clone snark verify ref, and hold the arc
    * this function is useful on js_sys
    * @returns {SNARKVerifyTaskRef}
    */
    clone() {
        const ret = wasm.snarkbehaviour_clone(this.__wbg_ptr);
        return SNARKVerifyTaskRef.__wrap(ret);
    }
}
/**
* SessionSk holds the [Session] and its session private key.
* To prove that the message was sent by the [Account] of [Session],
* we need to attach session and the signature signed by sk to the payload.
*
* SessionSk provide a `session` method to clone the session.
* SessionSk also provide `sign` method to sign a message.
*
* To verify the session, use `verify_self()` method of [Session].
* To verify a message, use `verify(msg, sig)` method of [Session].
*/
export class SessionSk {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SessionSk.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sessionsk_free(ptr);
    }
}
/**
* SessionSkBuilder is used to build a [SessionSk].
*
* Firstly, you need to provide the account's entity and type to [SessionSkBuilder::new] method.
* Then you can call `pack_session` to get the session dump for signing.
* After signing, you can call `sig` to set the signature back to builder.
* Finally, you can call `build` to get the [SessionSk].
*/
export class SessionSkBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SessionSkBuilder.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sessionskbuilder_free(ptr);
    }
    /**
    * Create a new SessionSkBuilder.
    * The "account_type" is lower case of [Account] variant.
    * The "account_entity" refers to the entity that is encapsulated by the [Account] variant, in string format.
    * @param {string} account_entity
    * @param {string} account_type
    * @returns {SessionSkBuilder}
    */
    static new(account_entity, account_type) {
        const ptr0 = passStringToWasm0(account_entity, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(account_type, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.sessionskbuilder_new(ptr0, len0, ptr1, len1);
        return SessionSkBuilder.__wrap(ret);
    }
    /**
    * This is a helper method to let user know if the account params is valid.
    * @returns {boolean}
    */
    validate_account() {
        const ret = wasm.sessionskbuilder_validate_account(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
    * Construct unsigned_info string for signing.
    * @returns {string}
    */
    unsigned_proof() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.sessionskbuilder_unsigned_proof(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_10(deferred1_0, deferred1_1, 1);
        }
    }
    /**
    * Set the signature of session that signed by account.
    * @param {Uint8Array} sig
    * @returns {SessionSkBuilder}
    */
    set_session_sig(sig) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passArray8ToWasm0(sig, wasm.__wbindgen_export_0);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sessionskbuilder_set_session_sig(ptr, ptr0, len0);
        return SessionSkBuilder.__wrap(ret);
    }
    /**
    * Set the lifetime of session.
    * @param {bigint} ttl_ms
    * @returns {SessionSkBuilder}
    */
    set_ttl(ttl_ms) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sessionskbuilder_set_ttl(ptr, ttl_ms);
        return SessionSkBuilder.__wrap(ret);
    }
    /**
    * Build the [SessionSk].
    * @returns {SessionSk}
    */
    build() {
        try {
            const ptr = this.__destroy_into_raw();
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.sessionskbuilder_build(retptr, ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return SessionSk.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* A struct representing a Trap
*/
export class Trap {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Trap.prototype);
        obj.__wbg_ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_trap_free(ptr);
    }
    /**
    * A marker method to indicate that an object is an instance of the `Trap`
    * class.
    */
    static __wbg_wasmer_trap() {
        wasm.trap___wbg_wasmer_trap();
    }
}

async function __wbg_load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);

            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                } else {
                    throw e;
                }
            }
        }

        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);

    } else {
        const instance = await WebAssembly.instantiate(module, imports);

        if (instance instanceof WebAssembly.Instance) {
            return { instance, module };

        } else {
            return instance;
        }
    }
}

function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
        takeObject(arg0);
    };
    imports.wbg.__wbindgen_number_new = function(arg0) {
        const ret = arg0;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_snarktaskbuilder_new = function(arg0) {
        const ret = SNARKTaskBuilder.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_backendbehaviour_new = function(arg0) {
        const ret = BackendBehaviour.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_snarkprooftaskref_new = function(arg0) {
        const ret = SNARKProofTaskRef.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_provider_new = function(arg0) {
        const ret = Provider.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
        const ret = getObject(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_string = function(arg0) {
        const ret = typeof(getObject(arg0)) === 'string';
        return ret;
    };
    imports.wbg.__wbindgen_as_number = function(arg0) {
        const ret = +getObject(arg0);
        return ret;
    };
    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {
        const ret = BigInt.asUintN(64, arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_shr = function(arg0, arg1) {
        const ret = getObject(arg0) >> getObject(arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_jsval_eq = function(arg0, arg1) {
        const ret = getObject(arg0) === getObject(arg1);
        return ret;
    };
    imports.wbg.__wbindgen_ge = function(arg0, arg1) {
        const ret = getObject(arg0) >= getObject(arg1);
        return ret;
    };
    imports.wbg.__wbindgen_is_bigint = function(arg0) {
        const ret = typeof(getObject(arg0)) === 'bigint';
        return ret;
    };
    imports.wbg.__wbindgen_bigint_from_i64 = function(arg0) {
        const ret = arg0;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {
        const ret = new Error(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_object = function(arg0) {
        const val = getObject(arg0);
        const ret = typeof(val) === 'object' && val !== null;
        return ret;
    };
    imports.wbg.__wbindgen_is_undefined = function(arg0) {
        const ret = getObject(arg0) === undefined;
        return ret;
    };
    imports.wbg.__wbindgen_in = function(arg0, arg1) {
        const ret = getObject(arg0) in getObject(arg1);
        return ret;
    };
    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {
        const obj = getObject(arg1);
        const ret = typeof(obj) === 'number' ? obj : undefined;
        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;
        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);
    };
    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
        const obj = getObject(arg1);
        const ret = typeof(obj) === 'string' ? obj : undefined;
        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        var len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbindgen_boolean_get = function(arg0) {
        const v = getObject(arg0);
        const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;
        return ret;
    };
    imports.wbg.__wbindgen_cb_drop = function(arg0) {
        const obj = takeObject(arg0).original;
        if (obj.cnt-- == 1) {
            obj.a = 0;
            return true;
        }
        const ret = false;
        return ret;
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        const ret = getStringFromWasm0(arg0, arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_null = function(arg0) {
        const ret = getObject(arg0) === null;
        return ret;
    };
    imports.wbg.__wbg_input_unwrap = function(arg0) {
        const ret = Input.__unwrap(takeObject(arg0));
        return ret;
    };
    imports.wbg.__wbg_circuit_new = function(arg0) {
        const ret = Circuit.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_circuit_unwrap = function(arg0) {
        const ret = Circuit.__unwrap(takeObject(arg0));
        return ret;
    };
    imports.wbg.__wbindgen_bigint_from_u128 = function(arg0, arg1) {
        const ret = BigInt.asUintN(64, arg0) << BigInt(64) | BigInt.asUintN(64, arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_log_c9486ca5d8e2cbe8 = function(arg0, arg1) {
        let deferred0_0;
        let deferred0_1;
        try {
            deferred0_0 = arg0;
            deferred0_1 = arg1;
            console.log(getStringFromWasm0(arg0, arg1));
        } finally {
            wasm.__wbindgen_export_10(deferred0_0, deferred0_1, 1);
        }
    };
    imports.wbg.__wbg_log_aba5996d9bde071f = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
        let deferred0_0;
        let deferred0_1;
        try {
            deferred0_0 = arg0;
            deferred0_1 = arg1;
            console.log(getStringFromWasm0(arg0, arg1), getStringFromWasm0(arg2, arg3), getStringFromWasm0(arg4, arg5), getStringFromWasm0(arg6, arg7));
        } finally {
            wasm.__wbindgen_export_10(deferred0_0, deferred0_1, 1);
        }
    };
    imports.wbg.__wbg_mark_40e050a77cc39fea = function(arg0, arg1) {
        performance.mark(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbg_measure_aa7a73f17813f708 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        let deferred0_0;
        let deferred0_1;
        let deferred1_0;
        let deferred1_1;
        try {
            deferred0_0 = arg0;
            deferred0_1 = arg1;
            deferred1_0 = arg2;
            deferred1_1 = arg3;
            performance.measure(getStringFromWasm0(arg0, arg1), getStringFromWasm0(arg2, arg3));
        } finally {
            wasm.__wbindgen_export_10(deferred0_0, deferred0_1, 1);
            wasm.__wbindgen_export_10(deferred1_0, deferred1_1, 1);
        }
    }, arguments) };
    imports.wbg.__wbg_fetch_6a2624d7f767e331 = function(arg0) {
        const ret = fetch(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_trap_new = function(arg0) {
        const ret = Trap.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_function = function(arg0) {
        const ret = typeof(getObject(arg0)) === 'function';
        return ret;
    };
    imports.wbg.__wbg_instanceof_Global_c3f538bee0dcbf5a = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof WebAssembly.Global;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbindgen_jsval_loose_eq = function(arg0, arg1) {
        const ret = getObject(arg0) == getObject(arg1);
        return ret;
    };
    imports.wbg.__wbg_fetch_43b95fc3417395cd = function(arg0) {
        const ret = fetch(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_String_b9412f8799faab3e = function(arg0, arg1) {
        const ret = String(getObject(arg1));
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_getwithrefkey_edc2c8960f0f1191 = function(arg0, arg1) {
        const ret = getObject(arg0)[getObject(arg1)];
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_f975102236d3c502 = function(arg0, arg1, arg2) {
        getObject(arg0)[takeObject(arg1)] = takeObject(arg2);
    };
    imports.wbg.__wbindgen_is_falsy = function(arg0) {
        const ret = !getObject(arg0);
        return ret;
    };
    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {
        const ret = new Error();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {
        const ret = getObject(arg1).stack;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {
        let deferred0_0;
        let deferred0_1;
        try {
            deferred0_0 = arg0;
            deferred0_1 = arg1;
            console.error(getStringFromWasm0(arg0, arg1));
        } finally {
            wasm.__wbindgen_export_10(deferred0_0, deferred0_1, 1);
        }
    };
    imports.wbg.__wbg_instanceof_Window_99dc9805eaa2614b = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Window;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_setTimeout_b1353d32793b2314 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        const ret = getObject(arg0).setTimeout(getObject(arg1), arg2, ...getObject(arg3));
        return ret;
    }, arguments) };
    imports.wbg.__wbg_setTimeout_bd20251bb242e262 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).setTimeout(getObject(arg1), arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_instanceof_WorkerGlobalScope_a9d2cb51ce9a4579 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof WorkerGlobalScope;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_fetch_06d656a1b748ac0d = function(arg0, arg1) {
        const ret = getObject(arg0).fetch(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_setTimeout_c17e86aa67b0c348 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        const ret = getObject(arg0).setTimeout(getObject(arg1), arg2, ...getObject(arg3));
        return ret;
    }, arguments) };
    imports.wbg.__wbg_setTimeout_a27e01b00260aafd = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).setTimeout(getObject(arg1), arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_indexNames_46f7cbd210ff2316 = function(arg0) {
        const ret = getObject(arg0).indexNames;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_clear_cb10866f326c2368 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).clear();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_count_e8ca9e4c26c83124 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).count();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_count_b52f69a5b1f2c70c = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).count(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_createIndex_224ae7381d3b4bfd = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {
        const ret = getObject(arg0).createIndex(getStringFromWasm0(arg1, arg2), getObject(arg3), getObject(arg4));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_delete_a1548c00f44e1608 = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).delete(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_deleteIndex_c9c7ce8f15358d94 = function() { return handleError(function (arg0, arg1, arg2) {
        getObject(arg0).deleteIndex(getStringFromWasm0(arg1, arg2));
    }, arguments) };
    imports.wbg.__wbg_get_f477c47401497f39 = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).get(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_index_467316d1b83c23e0 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).index(getStringFromWasm0(arg1, arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_openCursor_f22aef1cc12ac4f8 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).openCursor();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_openCursor_dfd216338fea9811 = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).openCursor(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_openCursor_d0e99645eacfd500 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).openCursor(getObject(arg1), takeObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_put_39d210624272c87d = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).put(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_put_d0c11cfda402797f = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).put(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_key_37c38754953d9548 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).key;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_advance_91191c6e755be0cf = function() { return handleError(function (arg0, arg1) {
        getObject(arg0).advance(arg1 >>> 0);
    }, arguments) };
    imports.wbg.__wbg_continue_dc63786eb32e68f4 = function() { return handleError(function (arg0) {
        getObject(arg0).continue();
    }, arguments) };
    imports.wbg.__wbg_openCursor_6c903cb7e8db1573 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).openCursor();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_openCursor_6b6926ebd5eafbbc = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).openCursor(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_openCursor_2853a18cacddaeba = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).openCursor(getObject(arg1), takeObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_instanceof_IdbFactory_44ad7bf9d2432630 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof IDBFactory;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_open_67f43f98b0470c36 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_open_fdc86a2e78792175 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_localDescription_736a54bdb2e70896 = function(arg0) {
        const ret = getObject(arg0).localDescription;
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_iceGatheringState_c35c38452f494b1b = function(arg0) {
        const ret = getObject(arg0).iceGatheringState;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_connectionState_c6b4751042e0732d = function(arg0) {
        const ret = getObject(arg0).connectionState;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_setonicegatheringstatechange_9f0e63199d73e3e7 = function(arg0, arg1) {
        getObject(arg0).onicegatheringstatechange = getObject(arg1);
    };
    imports.wbg.__wbg_setonconnectionstatechange_a600bf11eb400fb1 = function(arg0, arg1) {
        getObject(arg0).onconnectionstatechange = getObject(arg1);
    };
    imports.wbg.__wbg_setondatachannel_c8f223bc7592caf3 = function(arg0, arg1) {
        getObject(arg0).ondatachannel = getObject(arg1);
    };
    imports.wbg.__wbg_newwithconfiguration_ec18ce3fe67d91ad = function() { return handleError(function (arg0) {
        const ret = new RTCPeerConnection(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_close_83a1e7e5567acd26 = function(arg0) {
        getObject(arg0).close();
    };
    imports.wbg.__wbg_createAnswer_097acd95326ff4f4 = function(arg0) {
        const ret = getObject(arg0).createAnswer();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_createDataChannel_e59a52b19729bd15 = function(arg0, arg1, arg2) {
        const ret = getObject(arg0).createDataChannel(getStringFromWasm0(arg1, arg2));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_createOffer_455d796fb06d7231 = function(arg0) {
        const ret = getObject(arg0).createOffer();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_setLocalDescription_e99fba65f9291bd9 = function(arg0, arg1) {
        const ret = getObject(arg0).setLocalDescription(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_setRemoteDescription_429160d7ab3ccfca = function(arg0, arg1) {
        const ret = getObject(arg0).setRemoteDescription(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_value_2423cc2503742f59 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).value;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_data_5d6c23170bc379b2 = function(arg0) {
        const ret = getObject(arg0).data;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Blob_2c181202f4fb7894 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Blob;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_size_be41bf26ab113208 = function(arg0) {
        const ret = getObject(arg0).size;
        return ret;
    };
    imports.wbg.__wbg_arrayBuffer_fb7b7f60c42268ca = function(arg0) {
        const ret = getObject(arg0).arrayBuffer();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_setoncomplete_9fc44a0f3233b408 = function(arg0, arg1) {
        getObject(arg0).oncomplete = getObject(arg1);
    };
    imports.wbg.__wbg_setonerror_6cfa9ee896eed159 = function(arg0, arg1) {
        getObject(arg0).onerror = getObject(arg1);
    };
    imports.wbg.__wbg_objectStore_fe6c5364a54fc56a = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).objectStore(getStringFromWasm0(arg1, arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_instanceof_ServiceWorkerGlobalScope_7f3405534d3bf556 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof ServiceWorkerGlobalScope;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_target_791826e938c3e308 = function(arg0) {
        const ret = getObject(arg0).target;
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_channel_055227551a2f9c02 = function(arg0) {
        const ret = getObject(arg0).channel;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_a979e9eedc5e81a3 = function() { return handleError(function () {
        const ret = new Headers();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_append_047382169b61373d = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {
        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
    }, arguments) };
    imports.wbg.__wbg_newwithstrandinit_9fd2fc855c6327eb = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_sdp_4b3fcbc7dca7ffa6 = function(arg0, arg1) {
        const ret = getObject(arg1).sdp;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_objectStoreNames_39d5d8ff165673c0 = function(arg0) {
        const ret = getObject(arg0).objectStoreNames;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_createObjectStore_3e6033d951d4d4e3 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        const ret = getObject(arg0).createObjectStore(getStringFromWasm0(arg1, arg2), getObject(arg3));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_deleteObjectStore_5e4d5099dfc2a4dd = function() { return handleError(function (arg0, arg1, arg2) {
        getObject(arg0).deleteObjectStore(getStringFromWasm0(arg1, arg2));
    }, arguments) };
    imports.wbg.__wbg_transaction_f3434456de85f902 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).transaction(getObject(arg1), takeObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_setonupgradeneeded_ebb6b49da07ef076 = function(arg0, arg1) {
        getObject(arg0).onupgradeneeded = getObject(arg1);
    };
    imports.wbg.__wbg_result_43945900200dc972 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).result;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_error_ebceed2ec415ded1 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).error;
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_transaction_e0b73c5d10b37756 = function(arg0) {
        const ret = getObject(arg0).transaction;
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_setonsuccess_8c53d1b7e13c41e5 = function(arg0, arg1) {
        getObject(arg0).onsuccess = getObject(arg1);
    };
    imports.wbg.__wbg_setonerror_39dab75ef2d606f0 = function(arg0, arg1) {
        getObject(arg0).onerror = getObject(arg1);
    };
    imports.wbg.__wbg_label_e41da96d323faedf = function(arg0, arg1) {
        const ret = getObject(arg1).label;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_readyState_f13efade6d0c89be = function(arg0) {
        const ret = getObject(arg0).readyState;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_setonopen_2c52dca80f5bf3b8 = function(arg0, arg1) {
        getObject(arg0).onopen = getObject(arg1);
    };
    imports.wbg.__wbg_setonclose_c667c70b7f8f87ec = function(arg0, arg1) {
        getObject(arg0).onclose = getObject(arg1);
    };
    imports.wbg.__wbg_setonmessage_66caaedeef0eb593 = function(arg0, arg1) {
        getObject(arg0).onmessage = getObject(arg1);
    };
    imports.wbg.__wbg_send_f913046d68ddacf0 = function() { return handleError(function (arg0, arg1, arg2) {
        getObject(arg0).send(getArrayU8FromWasm0(arg1, arg2));
    }, arguments) };
    imports.wbg.__wbg_signal_7876560d9d0f914c = function(arg0) {
        const ret = getObject(arg0).signal;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_fa36281638875de8 = function() { return handleError(function () {
        const ret = new AbortController();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_abort_7792bf3f664d7bb3 = function(arg0) {
        getObject(arg0).abort();
    };
    imports.wbg.__wbg_length_8df427eeded90205 = function(arg0) {
        const ret = getObject(arg0).length;
        return ret;
    };
    imports.wbg.__wbg_contains_7a87af89c3705616 = function(arg0, arg1, arg2) {
        const ret = getObject(arg0).contains(getStringFromWasm0(arg1, arg2));
        return ret;
    };
    imports.wbg.__wbg_get_6de6fdeef4691e1a = function(arg0, arg1, arg2) {
        const ret = getObject(arg1)[arg2 >>> 0];
        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        var len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_instanceof_Response_0d25bb8436a9cefe = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Response;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_url_47f8307501523859 = function(arg0, arg1) {
        const ret = getObject(arg1).url;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_status_351700a30c61ba61 = function(arg0) {
        const ret = getObject(arg0).status;
        return ret;
    };
    imports.wbg.__wbg_headers_e38c00d713e8888c = function(arg0) {
        const ret = getObject(arg0).headers;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_arrayBuffer_ec4617b29bb0f61c = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).arrayBuffer();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_queueMicrotask_118eeb525d584d9a = function(arg0) {
        queueMicrotask(getObject(arg0));
    };
    imports.wbg.__wbg_queueMicrotask_26a89c14c53809c0 = function(arg0) {
        const ret = getObject(arg0).queueMicrotask;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_crypto_d05b68a3572bb8ca = function(arg0) {
        const ret = getObject(arg0).crypto;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_process_b02b3570280d0366 = function(arg0) {
        const ret = getObject(arg0).process;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_versions_c1cb42213cedf0f5 = function(arg0) {
        const ret = getObject(arg0).versions;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_node_43b1089f407e4ec2 = function(arg0) {
        const ret = getObject(arg0).node;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_msCrypto_10fc94afee92bd76 = function(arg0) {
        const ret = getObject(arg0).msCrypto;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_require_9a7e0f667ead4995 = function() { return handleError(function () {
        const ret = module.require;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_randomFillSync_b70ccbdf4926a99d = function() { return handleError(function (arg0, arg1) {
        getObject(arg0).randomFillSync(takeObject(arg1));
    }, arguments) };
    imports.wbg.__wbg_getRandomValues_7e42b4fb8779dc6d = function() { return handleError(function (arg0, arg1) {
        getObject(arg0).getRandomValues(getObject(arg1));
    }, arguments) };
    imports.wbg.__wbg_get_c43534c00f382c8a = function(arg0, arg1) {
        const ret = getObject(arg0)[arg1 >>> 0];
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_length_d99b680fd68bf71b = function(arg0) {
        const ret = getObject(arg0).length;
        return ret;
    };
    imports.wbg.__wbg_new_34c624469fb1d4fd = function() {
        const ret = new Array();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_BigInt_32d50b32fc9c8c1b = function(arg0) {
        const ret = BigInt(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_newnoargs_5859b6d41c6fe9f7 = function(arg0, arg1) {
        const ret = new Function(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_ad4df4628315a892 = function() {
        const ret = new Map();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_next_1938cf110c9491d4 = function(arg0) {
        const ret = getObject(arg0).next;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_next_267398d0e0761bf9 = function() { return handleError(function (arg0) {
        const ret = getObject(arg0).next();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_done_506b44765ba84b9c = function(arg0) {
        const ret = getObject(arg0).done;
        return ret;
    };
    imports.wbg.__wbg_value_31485d8770eb06ab = function(arg0) {
        const ret = getObject(arg0).value;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_iterator_364187e1ee96b750 = function() {
        const ret = Symbol.iterator;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_get_5027b32da70f39b1 = function() { return handleError(function (arg0, arg1) {
        const ret = Reflect.get(getObject(arg0), getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_call_a79f1973a4f07d5e = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).call(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_new_87d841e70661f6e9 = function() {
        const ret = new Object();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_self_086b5302bcafb962 = function() { return handleError(function () {
        const ret = self.self;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_window_132fa5d7546f1de5 = function() { return handleError(function () {
        const ret = window.window;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_globalThis_e5f801a37ad7d07b = function() { return handleError(function () {
        const ret = globalThis.globalThis;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_global_f9a61fce4af6b7c1 = function() { return handleError(function () {
        const ret = global.global;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_newwithlength_6f9d90ee462acc16 = function(arg0) {
        const ret = new Array(arg0 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_379b27f1d5f1bf9c = function(arg0, arg1, arg2) {
        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);
    };
    imports.wbg.__wbg_from_a663e01d8dab8e44 = function(arg0) {
        const ret = Array.from(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_isArray_fbd24d447869b527 = function(arg0) {
        const ret = Array.isArray(getObject(arg0));
        return ret;
    };
    imports.wbg.__wbg_of_3d7aa62bb0ab56ee = function(arg0) {
        const ret = Array.of(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_push_906164999551d793 = function(arg0, arg1) {
        const ret = getObject(arg0).push(getObject(arg1));
        return ret;
    };
    imports.wbg.__wbg_instanceof_ArrayBuffer_f4521cec1b99ee35 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof ArrayBuffer;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_byteLength_7e9da7745829ddc4 = function(arg0) {
        const ret = getObject(arg0).byteLength;
        return ret;
    };
    imports.wbg.__wbg_toString_921d6bb053bd4199 = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).toString(arg1);
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_toString_89a436f8f85da608 = function(arg0, arg1, arg2) {
        const ret = getObject(arg1).toString(arg2);
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_instanceof_Error_f5ae6a28929a8190 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Error;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_message_5dbdf59ed61bbc49 = function(arg0) {
        const ret = getObject(arg0).message;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_toString_5326377607a05bf2 = function(arg0) {
        const ret = getObject(arg0).toString();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Function_5102294376e686e4 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Function;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_apply_d890a2eae27f4a03 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).apply(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_call_f6a2bc58c19c53c6 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_bind_22e4a9cd5395da74 = function(arg0, arg1, arg2) {
        const ret = getObject(arg0).bind(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Map_3301e77dd7605892 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Map;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_set_83e83bc2428e50ab = function(arg0, arg1, arg2) {
        const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_isSafeInteger_d8c89788832a17bf = function(arg0) {
        const ret = Number.isSafeInteger(getObject(arg0));
        return ret;
    };
    imports.wbg.__wbg_getTime_af7ca51c0bcefa08 = function(arg0) {
        const ret = getObject(arg0).getTime();
        return ret;
    };
    imports.wbg.__wbg_new0_c0e40662db0749ee = function() {
        const ret = new Date();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Object_06e0ec0f1056bcd5 = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Object;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_constructor_13a21f1e55c4840e = function(arg0) {
        const ret = getObject(arg0).constructor;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_entries_7a47f5716366056b = function(arg0) {
        const ret = Object.entries(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_toString_61d1ba76c783d2bc = function(arg0) {
        const ret = getObject(arg0).toString();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_1d93771b84541aa5 = function(arg0, arg1) {
        try {
            var state0 = {a: arg0, b: arg1};
            var cb0 = (arg0, arg1) => {
                const a = state0.a;
                state0.a = 0;
                try {
                    return __wbg_adapter_469(a, state0.b, arg0, arg1);
                } finally {
                    state0.a = a;
                }
            };
            const ret = new Promise(cb0);
            return addHeapObject(ret);
        } finally {
            state0.a = state0.b = 0;
        }
    };
    imports.wbg.__wbg_resolve_97ecd55ee839391b = function(arg0) {
        const ret = Promise.resolve(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_7aeb7c5f1536640f = function(arg0, arg1) {
        const ret = getObject(arg0).then(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_5842e4e97f7beace = function(arg0, arg1, arg2) {
        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_buffer_5d1b598a01b41a42 = function(arg0) {
        const ret = getObject(arg0).buffer;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_d695c7957788f922 = function(arg0, arg1, arg2) {
        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_ace717933ad7117f = function(arg0) {
        const ret = new Uint8Array(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_74906aa30864df5a = function(arg0, arg1, arg2) {
        getObject(arg0).set(getObject(arg1), arg2 >>> 0);
    };
    imports.wbg.__wbg_length_f0764416ba5bb237 = function(arg0) {
        const ret = getObject(arg0).length;
        return ret;
    };
    imports.wbg.__wbg_instanceof_Uint8Array_4f5cffed7df34b2f = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof Uint8Array;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_newwithlength_728575f3bba9959b = function(arg0) {
        const ret = new Uint8Array(arg0 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_subarray_7f7a652672800851 = function(arg0, arg1, arg2) {
        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_stringify_daa6661e90c04140 = function() { return handleError(function (arg0) {
        const ret = JSON.stringify(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_new_c8841ffc76bb8f0e = function() { return handleError(function (arg0, arg1) {
        const ret = new WebAssembly.Instance(getObject(arg0), getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_exports_f39b8faa22512b2b = function(arg0) {
        const ret = getObject(arg0).exports;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_393d9e609f8faae8 = function() { return handleError(function (arg0) {
        const ret = new WebAssembly.Module(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_exports_3d859e0fdf377d99 = function(arg0) {
        const ret = WebAssembly.Module.exports(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_imports_639c705495efd2a6 = function(arg0) {
        const ret = WebAssembly.Module.imports(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Table_41976379ce74fcce = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof WebAssembly.Table;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_get_ca324e8b9d32bbb3 = function() { return handleError(function (arg0, arg1) {
        const ret = getObject(arg0).get(arg1 >>> 0);
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_instanceof_Memory_5fea59656fa2396a = function(arg0) {
        let result;
        try {
            result = getObject(arg0) instanceof WebAssembly.Memory;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_new_f2616ac8f4633265 = function() { return handleError(function (arg0) {
        const ret = new WebAssembly.Memory(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_apply_2ea5e74f79738d8f = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = Reflect.apply(getObject(arg0), getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_getPrototypeOf_36d8dc78396df0fd = function() { return handleError(function (arg0) {
        const ret = Reflect.getPrototypeOf(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_has_a2919659b7b645b3 = function() { return handleError(function (arg0, arg1) {
        const ret = Reflect.has(getObject(arg0), getObject(arg1));
        return ret;
    }, arguments) };
    imports.wbg.__wbg_set_37a50e901587b477 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));
        return ret;
    }, arguments) };
    imports.wbg.__wbindgen_bigint_get_as_i64 = function(arg0, arg1) {
        const v = getObject(arg1);
        const ret = typeof(v) === 'bigint' ? v : undefined;
        getBigInt64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? BigInt(0) : ret;
        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);
    };
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
        const ret = debugString(getObject(arg1));
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
        throw new Error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbindgen_rethrow = function(arg0) {
        throw takeObject(arg0);
    };
    imports.wbg.__wbindgen_memory = function() {
        const ret = wasm.memory;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_function_table = function() {
        const ret = wasm.__wbindgen_export_2;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper7291 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 1516, __wbg_adapter_64);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper10177 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2607, __wbg_adapter_67);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper10179 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2607, __wbg_adapter_70);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper10385 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2690, __wbg_adapter_73);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper10787 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2805, __wbg_adapter_76);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper10789 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2805, __wbg_adapter_76);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper10791 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2805, __wbg_adapter_76);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper10793 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2805, __wbg_adapter_83);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper11533 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 2899, __wbg_adapter_86);
        return addHeapObject(ret);
    };

    return imports;
}

function __wbg_init_memory(imports, maybe_memory) {

}

function __wbg_finalize_init(instance, module) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module;
    cachedBigInt64Memory0 = null;
    cachedFloat64Memory0 = null;
    cachedInt32Memory0 = null;
    cachedUint32Memory0 = null;
    cachedUint8Memory0 = null;


    return wasm;
}

function initSync(module) {
    if (wasm !== undefined) return wasm;

    const imports = __wbg_get_imports();

    __wbg_init_memory(imports);

    if (!(module instanceof WebAssembly.Module)) {
        module = new WebAssembly.Module(module);
    }

    const instance = new WebAssembly.Instance(module, imports);

    return __wbg_finalize_init(instance, module);
}

async function __wbg_init(input) {
    if (wasm !== undefined) return wasm;

    if (typeof input === 'undefined') {
        input = new URL('rings_node_bg.wasm', import.meta.url);
    }
    const imports = __wbg_get_imports();

    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
        input = fetch(input);
    }

    __wbg_init_memory(imports);

    const { instance, module } = await __wbg_load(await input, imports);

    return __wbg_finalize_init(instance, module);
}

export { initSync }
export default __wbg_init;
