/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_snarkprooftaskref_free(a: number): void;
export function snarkprooftaskref_split(a: number, b: number, c: number): void;
export function snarkprooftaskref_to_json(a: number, b: number): void;
export function snarkprooftaskref_from_json(a: number, b: number, c: number): void;
export function __wbg_snarkverifytaskref_free(a: number): void;
export function snarkverifytaskref_to_json(a: number, b: number): void;
export function snarkverifytaskref_from_json(a: number, b: number, c: number): void;
export function snarkbehaviour_as_dyn_obj(a: number): number;
export function snarkbehaviour_handle_snark_task_message(a: number, b: number, c: number, d: number): number;
export function snarkbehaviour_gen_proof_task_ref(a: number, b: number, c: number): void;
export function snarkbehaviour_handle_snark_proof_task_ref(a: number, b: number): void;
export function snarkbehaviour_handle_snark_verify_task_ref(a: number, b: number, c: number): void;
export function snarkbehaviour_send_proof_task_to(a: number, b: number, c: number, d: number, e: number): number;
export function snarkbehaviour_gen_and_send_proof_task_to(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function snarkbehaviour_new_instance(): number;
export function snarkbehaviour_clone(a: number): number;
export function snarktaskbuilder_new_instance(a: number, b: number, c: number, d: number, e: number): number;
export function bigint_to_field(a: number, b: number, c: number): void;
export function input_from_array(a: number, b: number): number;
export function __wbg_snarkbehaviour_free(a: number): void;
export function snarkbehaviour_get_task_result(a: number, b: number, c: number, d: number): void;
export function __wbg_input_free(a: number): void;
export function input_to_json(a: number, b: number): void;
export function input_from_json(a: number, b: number, c: number): void;
export function __wbg_circuit_free(a: number): void;
export function circuit_to_json(a: number, b: number): void;
export function circuit_from_json(a: number, b: number, c: number): void;
export function __wbg_field_free(a: number): void;
export function field_from_u64(a: number, b: number): number;
export function __wbg_snarktaskbuilder_free(a: number): void;
export function snarktaskbuilder_from_local(a: number, b: number, c: number, d: number, e: number): number;
export function snarktaskbuilder_from_remote(a: number, b: number, c: number, d: number, e: number): number;
export function snarktaskbuilder_gen_circuits(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_backendbehaviour_free(a: number): void;
export function backendbehaviour_new(): number;
export function backendbehaviour_as_dyn_obj(a: number): number;
export function backendbehaviour_extend(a: number, b: number): void;
export function backendbehaviour_on(a: number, b: number, c: number, d: number): void;
export function __wbg_processorconfig_free(a: number): void;
export function processorconfig_new(a: number, b: number, c: number, d: number): number;
export function processorconfig_new_with_ext_addr(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function processorconfig_session_sk(a: number): number;
export function __wbg_processorconfigserialized_free(a: number): void;
export function debug(a: number): void;
export function log_level(a: number, b: number): void;
export function __wbg_provider_free(a: number): void;
export function snarkverifytaskref_clone(a: number): number;
export function snarkprooftaskref_clone(a: number): number;
export function init_logging(a: number): void;
export function __wbg_backendmessagehandlerdynobj_free(a: number): void;
export function __wbg_providerref_free(a: number): void;
export function provider_as_ref(a: number): number;
export function provider_new_instance(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function provider_new_provider_with_serialized_config(a: number, b: number, c: number): number;
export function provider_new_provider_with_config(a: number, b: number): number;
export function provider_address(a: number, b: number): void;
export function provider_new_provider_with_storage(a: number, b: number, c: number, d: number): number;
export function provider_request(a: number, b: number, c: number, d: number): number;
export function provider_listen(a: number): number;
export function provider_connect_peer_via_http(a: number, b: number, c: number): number;
export function provider_connect_with_address_without_wait(a: number, b: number, c: number, d: number): number;
export function provider_connect_with_address(a: number, b: number, c: number, d: number): number;
export function provider_list_peers(a: number): number;
export function provider_get_node_info(a: number): number;
export function provider_disconnect(a: number, b: number, c: number, d: number): number;
export function provider_disconnect_all(a: number): number;
export function provider_send_message(a: number, b: number, c: number, d: number): number;
export function provider_get_peer(a: number, b: number, c: number, d: number): number;
export function provider_wait_for_connected(a: number, b: number, c: number, d: number): number;
export function provider_wait_for_data_channel_open(a: number, b: number, c: number, d: number): number;
export function provider_storage_check_cache(a: number, b: number, c: number, d: number): number;
export function provider_storage_fetch(a: number, b: number, c: number, d: number): number;
export function provider_storage_store(a: number, b: number, c: number): number;
export function provider_send_http_request(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): number;
export function provider_send_simple_text_message(a: number, b: number, c: number, d: number, e: number): number;
export function provider_lookup_service(a: number, b: number, c: number): number;
export function get_address_from_hex_pubkey(a: number, b: number, c: number): void;
export function get_address(a: number, b: number, c: number, d: number): void;
export function __wbg_trap_free(a: number): void;
export function trap___wbg_wasmer_trap(): void;
export function __wbg_sessionskbuilder_free(a: number): void;
export function __wbg_sessionsk_free(a: number): void;
export function sessionskbuilder_new(a: number, b: number, c: number, d: number): number;
export function sessionskbuilder_validate_account(a: number): number;
export function sessionskbuilder_unsigned_proof(a: number, b: number): void;
export function sessionskbuilder_set_session_sig(a: number, b: number, c: number): number;
export function sessionskbuilder_set_ttl(a: number, b: number): number;
export function sessionskbuilder_build(a: number, b: number): void;
export function __wbindgen_export_0(a: number, b: number): number;
export function __wbindgen_export_1(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_export_3(a: number, b: number, c: number): void;
export function __wbindgen_export_4(a: number, b: number, c: number): void;
export function __wbindgen_export_5(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_export_6(a: number, b: number, c: number, d: number): void;
export function __wbindgen_export_7(a: number, b: number, c: number): void;
export function __wbindgen_export_8(a: number, b: number): void;
export function __wbindgen_export_9(a: number, b: number, c: number): void;
export function __wbindgen_export_10(a: number, b: number, c: number): void;
export function __wbindgen_export_11(a: number): void;
export function __wbindgen_export_12(a: number, b: number, c: number, d: number): void;
